
{%- block form_row -%}
    <div>
        {{ form_label(form) }}
        <div class="errors">
            {{ form_errors(form) }}
        </div>
        {{ form_widget(form) }}
    </div>
{%- endblock form_row -%}

{% block autocomplete_beneficiary_widget %}
    {% spaceless %}
        <input type="text" {{ block('widget_attributes') }} {% if value is not empty %}value="{{ value }}" {% endif %}/>
    {% endspaceless %}
    <script>
        defer(function(){
            // Init autocomplete
            $('#{{ id }}').autocomplete({
                data: {{ beneficiary_service.autocompleteBeneficiaries | json_encode(constant('JSON_UNESCAPED_UNICODE')) | raw }},
                limit: 6,
            });
        });
    </script>
{% endblock %}

{% block autocomplete_beneficiary_collection_widget %}
    {% spaceless %}
        <div {{ block('widget_container_attributes') }}>
            {% for child in form %}
                {{ form_widget(child) }}
            {% endfor %}
        </div>
    {% endspaceless %}
    <div {% if id is not empty %}id="{{ id }}_chips"{% endif %} class="chips">
    </div>
    <script>
        defer(function(){
            function updateInput{{ id }}Forms() {
                var chipsData = M.Chips.getInstance($('#{{ id }}_chips')).chipsData;
                var list = $('#{{ id }}');
                var counter = list.children().length
                for (let i = 0; i < Math.abs(chipsData.length - counter); i++) {
                    if (chipsData.length > counter) {
                        $("<input>").attr({
                            name: "{{ full_name }}[" + counter + "]",
                            id: "{{ id }}" + '_' + counter,
                            type: "hidden",
                        }).appendTo(list);
                    } else {
                        list.children().last().remove();
                    }
                }
                chipsData.each(function (index, member) {
                    $("input[name='{{ full_name }}[" + index + "]']").val(member['tag']);
                });
            }
            $('#{{ id }}_chips').chips({
                placeholder: 'Beneficiaire',
                data: $('#{{ id }} :input').map(function() {
                    return {tag: this.value};
                }),
                autocompleteOptions: {
                    {% if is_granted("ROLE_USER_MANAGER") %}
                    data: {{ beneficiary_service.autocompleteBeneficiaries | json_encode(constant('JSON_UNESCAPED_UNICODE')) | raw }},
                    {% else %}
                    data: [],
                    {% endif %}
                    limit: 6,
                },
                onChipAdd: updateInput{{ id }}Forms,
                onChipDelete: updateInput{{ id }}Forms,
            });
        });
    </script>
{% endblock %}

{% block radio_choice_widget %}
    {% spaceless %}
        <div {{ block('widget_container_attributes') }}>
            {% for child in form %}
                <div>
                    <label for="{{ child.vars.id }}" class="required" style="color: #5f5a5a; font-weight: 600;">
                        {{ form_widget(child) }}
                        <span>{{ child.vars.label }}</span>
                    </label>
                </div>
            {% endfor %}
            {% for child in form %}
                {{ form_widget(child) }}
            {% endfor %}
        </div>
    {% endspaceless %}
{% endblock %}

{% block simplemde_editor_row %}
    <div class="markdow-editor">
        <div class="errors">
            {{ form_errors(form) }}
        </div>
        {{ form_label(form) }}
        {{ form_widget(form) }}
    </div>
{% endblock %}

{% block simplemde_editor_widget %}
    <div class="simplemde-container row" data-for="{{ id }}">
    {{ block('textarea_widget') }}
    </div>
    <script type="text/javascript">
        onceSimpleMDEReady(function () {
            var element = $("#{{ id }}")[0];
            var config = {{ form.vars.editor_config|raw}};
            var simplemde_{{ id }} = new SimpleMDE(Object.assign(config, {'element': element}));
            var required = $("#{{ id }}").attr('required') === "required";
            $(".simplemde-container[data-for={{ id }}]").one('modalOpen',function () { //refresh
                simplemde_{{ id }}.codemirror.refresh();
            });
            if (required){
                $("#{{ id }}").removeAttr('required');
                $("#{{ id }}").closest('form').submit(function (e) {
                    if (!$("#{{ id }}").val()){ //required but no value
                        $(".simplemde-container[data-for={{ id }}]").addClass('error'); //add error
                        $(".simplemde-container[data-for={{ id }}]").find('.editor-statusbar').prepend('<span class="error-message">Ce champ est requis</span>'); //add message
                        e.preventDefault(); //do not submit
                        $(".simplemde-container[data-for={{ id }}] .CodeMirror textarea").one('keydown',function () { //remove error on change
                            $(".simplemde-container[data-for={{ id }}]").removeClass('error');
                            $(".simplemde-container[data-for={{ id }}]").find('.editor-statusbar .error-message').remove();
                        });
                        return false;
                    }
                })
            }
        });
    </script>
{% endblock %}
