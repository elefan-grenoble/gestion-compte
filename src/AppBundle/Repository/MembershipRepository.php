<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Query\Expr\Join;

/**
 * MembershipRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MembershipRepository extends \Doctrine\ORM\EntityRepository
{

    public function findWithNewCycleStarting($date, $cycle_type)
    {
        $qb = $this->createQueryBuilder('u')
            ->where('u.withdrawn = 0')
            ->andWhere('u.firstShiftDate is not NULL')
            ->andWhere('u.firstShiftDate < :now');

        if ($cycle_type == "abcd") {
            $day = $date->format("N") - 1; // 0 (for Monday) through 6 (for Sunday)
            $week = ($date->format("W") - 1) % 4; // 0 (for week A) through 3 (for week D)
            if ($day != 0 or $week != 0) {
                return [];
            }
        } else {
            $qb = $qb->andWhere('MOD(DATE_DIFF(:now, u.firstShiftDate), 28) = 0');
        }

        return $qb
            ->setParameter('now', $date)
            ->getQuery()
            ->getResult();
    }

    public function findWithHalfCyclePast($date, $cycle_type)
    {
        $qb = $this->createQueryBuilder('u')
            ->where('u.withdrawn = 0')
            ->andWhere('u.frozen = 0')
            ->andWhere('u.firstShiftDate is not NULL');

        if ($cycle_type == "abcd") {
            $day = $date->format("N") - 1; // 0 (for Monday) through 6 (for Sunday)
            $week = ($date->format("W") - 1) % 4; // 0 (for week A) through 3 (for week D)
            if ($day != 0 or $week != 2) {
                return [];
            }
        } else {
                $qb = $qb->andWhere('MOD(DATE_DIFF(:now, u.firstShiftDate), 14) = 0')
                ->andWhere('MOD(DATE_DIFF(:now, u.firstShiftDate), 28) != 0')
                ->setParameter('now', $date);
        }

        return $qb
            ->getQuery()
            ->getResult();
    }

    /**
     * @param string $role
     *
     * @return array
     */
    public function findByRole($role)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
            ->from($this->_entityName, 'u')
            ->where('u.roles LIKE :roles')
            ->setParameter('roles', '%"' . $role . '"%');

        return $qb->getQuery()->getResult();
    }

    /**
     * @param \DateTime $from
     * @param int $delay
     *
     * @return array
     */
    public function findWithExpiredRegistrationFrom($from)
    {
        $qb = $this->createQueryBuilder('m');
        $qb = $qb->leftJoin("m.registrations", "r")->addSelect("r"); //registrations
        $qb = $qb->leftJoin("m.registrations", "lr", Join::WITH,'lr.date > r.date')
            ->addSelect("lr")
            ->where('lr.id IS NULL') //registration is the last one registered
            ->andWhere('m.withdrawn = false')
            ->andWhere("r.date <= :from")
            ->setParameter('from', $from);

        return $qb->getQuery()->getResult();
    }

    public function findLateShifters($formHelper, $time_after_which_members_are_late_with_shifts = null, $form = null, $session = null)
    {
        $qb = $formHelper->initSearchQuery($this->_em);

        $qb = $qb->leftJoin("o.registrations", "lr", Join::WITH,'lr.date > r.date')->addSelect("lr")
            ->where('lr.id IS NULL') //registration is the last one registere
            ->leftJoin("o.timeLogs", "c")->addSelect("c")
            ->addSelect("(SELECT SUM(ti.time) FROM AppBundle\Entity\TimeLog ti WHERE ti.membership = o.id) AS HIDDEN time");

        if ($form === null) {
            $qb = $qb->andWhere('o.withdrawn = 0');
            $qb = $qb->andWhere('o.frozen = 0');
            $qb = $qb->andWhere('b.membership IN (SELECT IDENTITY(t.membership) FROM AppBundle\Entity\TimeLog t GROUP BY t.membership HAVING SUM(t.time) < :compteurlt * 60)');
        } else {
            $formHelper->processSearchFormAmbassadorData($form, $qb, $session, "shifttimelog");
        }

        if ($time_after_which_members_are_late_with_shifts !== null) {
            // avoid any surprise if $form overrides it: the explicit function argument wins
            $qb = $qb->setParameter('compteurlt', $time_after_which_members_are_late_with_shifts);
        }

        return $qb;
    }

}
