<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Query\Expr\Join;

/**
 * MembershipRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MembershipRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * findOneFromAutoComplete
     *
     * We consider that the $membership has the following format:
     * "#<Membership.member_number> <Beneficiary1.firstname> <Beneficiary1.lastname>"
     * or "#<Membership.member_number> <Beneficiary1.firstname> <Beneficiary1.lastname> & <Beneficiary2.firstname> <Beneficiary2.lastname>"
     */
    public function findOneFromAutoComplete($membership)
    {
        // extract member_number from $membership string
        preg_match('/#(\d+)\s/s', $membership, $matches);
        $membershipMemberNumber = $matches[1];


        $qb = $this->createQueryBuilder('m')
            ->where('m.member_number = :memberNumber')
            ->setParameter('memberNumber', $membershipMemberNumber);

        return $qb
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findAllActive()
    {
        $qb = $this->createQueryBuilder('m')
            ->where('m.withdrawn = 0');

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findWithNewCycleStarting($date, $cycle_type)
    {
        $qb = $this->createQueryBuilder('u')
            ->where('u.withdrawn = 0')
            ->andWhere('u.firstShiftDate is not NULL')
            ->andWhere('u.firstShiftDate < :now');

        if ($cycle_type == "abcd") {
            $day = $date->format("N") - 1; // 0 (for Monday) through 6 (for Sunday)
            $week = ($date->format("W") - 1) % 4; // 0 (for week A) through 3 (for week D)
            if ($day != 0 or $week != 0) {
                return [];
            }
        } else {
            $qb = $qb->andWhere('MOD(DATE_DIFF(:now, u.firstShiftDate), 28) = 0');
        }

        return $qb
            ->setParameter('now', $date)
            ->getQuery()
            ->getResult();
    }

    public function findWithHalfCyclePast($date, $cycle_type)
    {
        $qb = $this->createQueryBuilder('u')
            ->where('u.withdrawn = 0')
            ->andWhere('u.frozen = 0')
            ->andWhere('u.firstShiftDate is not NULL');

        if ($cycle_type == "abcd") {
            $day = $date->format("N") - 1; // 0 (for Monday) through 6 (for Sunday)
            $week = ($date->format("W") - 1) % 4; // 0 (for week A) through 3 (for week D)
            if ($day != 0 or $week != 2) {
                return [];
            }
        } else {
                $qb = $qb->andWhere('MOD(DATE_DIFF(:now, u.firstShiftDate), 14) = 0')
                    ->andWhere('MOD(DATE_DIFF(:now, u.firstShiftDate), 28) != 0')
                    ->setParameter('now', $date);
        }

        return $qb
            ->getQuery()
            ->getResult();
    }

    /**
     * @param \DateTime $from
     * @param int $delay
     *
     * @return array
     */
    public function findWithExpiredRegistrationFrom($from)
    {
        $qb = $this->createQueryBuilder('m');
        $qb = $qb->leftJoin("m.registrations", "r")->addSelect("r"); //registrations
        $qb = $qb->leftJoin("m.registrations", "lr", Join::WITH,'lr.date > r.date')
            ->addSelect("lr")
            ->where('lr.id IS NULL') //registration is the last one registered
            ->andWhere('m.withdrawn = false')
            ->andWhere("r.date <= :from")
            ->setParameter('from', $from);

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findLateShifters($time_after_which_members_are_late_with_shifts = null)
    {
        $qb = $this->createQueryBuilder('m')
           ->leftJoin("m.beneficiaries", "b")->addSelect("b")
            ->andWhere('m.member_number > 0') //do not include admin user
            ->andWhere('m.withdrawn = 0')
            ->andWhere('m.frozen = 0')
            ->andWhere('m IN (SELECT IDENTITY(t.membership) FROM AppBundle\Entity\TimeLog t GROUP BY t.membership HAVING SUM(t.time) < :compteurlt * 60)')
            ->setParameter('compteurlt', $time_after_which_members_are_late_with_shifts);

        return $qb
              ->getQuery()
              ->getResult();
    }
}
