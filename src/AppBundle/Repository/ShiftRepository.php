<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Beneficiary;
use AppBundle\Entity\Job;
use AppBundle\Entity\Shift;

/**
 * ShiftRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShiftRepository extends \Doctrine\ORM\EntityRepository
{

    public function findBucket($shift)
    {
        $qb = $this->createQueryBuilder('s');
        $qb
            ->leftJoin('s.shifter', 'u')
            ->addSelect('u')
            ->leftJoin('u.formations', 'f')
            ->addSelect('f')
            ->leftJoin('u.membership', 'm')
            ->addSelect('m')
            ->where('s.start = :start')
            ->andWhere('s.end = :end')
            ->andWhere('s.job = :job')
            ->setParameter('start', $shift->getStart())
            ->setParameter('end', $shift->getEnd())
            ->setParameter('job', $shift->getJob())
            ->orderBy('s.shifter', 'DESC');

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findFutures()
    {
        $qb = $this->createQueryBuilder('s');

        $qb
            ->where('s.start > :now')
            ->setParameter('now', new \Datetime('now'))
            ->orderBy('s.start', 'ASC');

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findFuturesWithJob($job, \DateTime $max = null)
    {
        $qb = $this->createQueryBuilder('s');

        $qb
            ->join('s.job', "job")
            ->where('s.start > :now')
            ->andwhere('job.id = :jid')
            ->setParameter('now', new \Datetime('now'))
            ->setParameter('jid', $job->getId());

        if ($max) {
            $qb
                ->andWhere('s.end < :max')
                ->setParameter('max', $max);
        }

        $qb->orderBy('s.start', 'ASC');

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findFrom(\DateTime $from, \DateTime $max = null, Job $job=null)
    {
        $qb = $this->createQueryBuilder('s');

        $qb
            ->select('s, f')
            ->leftJoin('s.formation', 'f')
            ->leftJoin('s.shifter', 'u')
            ->addSelect('u')
            ->leftJoin('u.formations', 'f1')
            ->addSelect('f1')
            ->where('s.start > :from')
            ->setParameter('from', $from);
        if ($max) {
            $qb
                ->andWhere('s.end < :max')
                ->setParameter('max', $max);
        }
        if ($job) {
            $qb
                ->andWhere('s.job = :job')
                ->setParameter('job', $job);
        }

        $qb->orderBy('s.start', 'ASC');

        return $qb
            ->getQuery()
            ->getResult();
    }

    /**
     * @param $user
     * @return mixed
     * @throws NonUniqueResultException
     */
    public function findFirst($user)
    {
        $qb = $this->createQueryBuilder('s');

        $qb
            ->join('s.shifter', "ben")
            ->where('ben.user = :user')
            ->setParameter('user', $user)
            ->andWhere('s.isDismissed = 0')
            ->orderBy('s.start', 'ASC')
            ->setMaxResults(1);

        return $qb
            ->getQuery()
            ->getOneOrNullResult();
    }


    /**
     * @param Beneficiary $beneficiary
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findLastShifted(Beneficiary $beneficiary)
    {
        $now = new \DateTime('now');

        $qb = $this->createQueryBuilder('s');
        $qb
            ->join('s.shifter', "ben")
            ->where('ben.id = :id')
            ->setParameter('id', $beneficiary->getId())
            ->andWhere('s.isDismissed = 0')
            ->andWhere('s.end < :today')
            ->setParameter('today',$now)
            ->orderBy('s.start', 'DESC')
            ->setMaxResults(1);

        return $qb
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findReservedBefore(\DateTime $max)
    {
        $qb = $this->createQueryBuilder('s');

        $qb
            ->where('s.start < :max')
            ->andWhere('s.lastShifter is not null')
            ->setParameter('max', $max);

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findReservedAt(\DateTime $date)
    {
        $qb = $this->createQueryBuilder('s');

        $datePlusOne = clone $date;
        $datePlusOne->modify('+1 day');

        $qb
            ->where('s.start >= :date')
            ->andwhere('s.start < :datePlusOne')
            ->andWhere('s.lastShifter is not null')
            ->setParameter('date', $date)
            ->setParameter('datePlusOne', $datePlusOne);

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findFirstShiftWithUserNotInitialized()
    {
        $qb = $this->createQueryBuilder('s');

        $qb
            ->join('s.shifter', "ben")
            ->join('ben.membership', "m")
            ->where('m.firstShiftDate is NULL')
            ->addOrderBy('m.id', 'ASC')
            ->addOrderBy('s.start', 'ASC');

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findAt(\DateTime $date, $jobs)
    {
        $qb = $this->createQueryBuilder('s');

        $datePlusOne = clone $date;
        $datePlusOne->modify('+1 day');

        $qb
            ->where('s.job IN (:jobs)')
            ->andwhere('s.start >= :date')
            ->andwhere('s.start < :datePlusOne')
            ->setParameter('jobs', $jobs)
            ->setParameter('date', $date)
            ->setParameter('datePlusOne', $datePlusOne);

        return $qb
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Shift $shift
     * @return mixed
     */
    public function findAlreadyBookedShiftsOfBucket(Shift $shift)
    {
        $qb = $this->createQueryBuilder('s');
        $qb
            ->where('s.job = :job')
            ->andwhere('s.start = :start')
            ->andwhere('s.end = :end')
            ->andWhere('s.shifter is not null')
            ->andWhere('s.isDismissed = false')
            ->setParameter('job', $shift->getJob())
            ->setParameter('start', $shift->getStart())
            ->setParameter('end', $shift->getEnd());

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findInProgress()
    {
        $now = new \DateTime('now');

        $qb = $this->createQueryBuilder('s');

        $qb
            ->where('s.shifter is not null')
            ->andWhere('s.isDismissed = 0')
            ->andwhere(':date between s.start and s.end')
            ->setParameter('date', $now)
            ->orderBy('s.start', 'ASC');

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findUpcomingToday()
    {
        $now = new \DateTime('now');
        $end_of_day = new \DateTime('now');
        $end_of_day->setTime(23, 59, 59);

        $qb = $this->createQueryBuilder('s');

        $qb
            ->where('s.isDismissed = 0')
            ->andwhere('s.start > :now AND s.end < :end_of_day')
            ->setParameter('now', $now)
            ->setParameter('end_of_day', $end_of_day)
            ->orderBy('s.start', 'ASC');

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function getOnGoingShifts($beneficiary)
    {
        $qb = $this->createQueryBuilder('s')
                    ->where('s.end > :now')
                    ->andwhere('s.start < :now_plus_ten')
                    ->andwhere('s.shifter = :sid')
                    ->setParameter('now', new \Datetime('now'))
                    ->setParameter('now_plus_ten', new \Datetime('now +10 minutes'))
                    ->setParameter('sid', $beneficiary->getId());

        return $qb
            ->getQuery()
            ->getResult();
    }

}
